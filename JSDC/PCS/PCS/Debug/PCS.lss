
PCS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000005e8  0000067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000067c  2**0
                  ALLOC
  3 .stab         00001c14  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006f3  00000000  00000000  00002290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002983  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  000029b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000220  00000000  00000000  000029f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000e0  00000000  00000000  00002c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000014c  00000000  00000000  00002cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000008c  00000000  00000000  00002e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000015c  00000000  00000000  00002ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001f2  00000000  00000000  00003028  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  0000321a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_16>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d5 e0       	ldi	r29, 0x05	; 5
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a4 30       	cpi	r26, 0x04	; 4
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  cc:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <PWM_init>:
// For F_CPU=8MHz and /8 prescaler no conversion is needed
#define US2TIMER1(x) (x)
void PWM_init(void)
{
	//Initialize Timer to PWM mode
	TCCR1A |= (1<<COM1B1)|(1<<WGM11)|(1<<WGM10);
  d4:	e0 e8       	ldi	r30, 0x80	; 128
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	83 62       	ori	r24, 0x23	; 35
  dc:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1 << CS11);
  de:	e1 e8       	ldi	r30, 0x81	; 129
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8a 61       	ori	r24, 0x1A	; 26
  e6:	80 83       	st	Z, r24

	//Make sure to make OC0 pin (pin PB3 for atmega32) as output pin
	OCR1A = 20000;
  e8:	80 e2       	ldi	r24, 0x20	; 32
  ea:	9e e4       	ldi	r25, 0x4E	; 78
  ec:	90 93 89 00 	sts	0x0089, r25
  f0:	80 93 88 00 	sts	0x0088, r24
	DDRD |= (1<<PD4);
  f4:	54 9a       	sbi	0x0a, 4	; 10
  f6:	08 95       	ret

000000f8 <Capture_init>:
	
}
void Capture_init(void)
{
	//TCCR1B |= (1 << CS10);	// /8 prescaler
	TIFR1 = (1 << ICF1);			// clear interrupt-flag
  f8:	80 e2       	ldi	r24, 0x20	; 32
  fa:	86 bb       	out	0x16, r24	; 22
	TIMSK1 |= (1 << ICIE1);		// enable Timer1 input capture interrupt
  fc:	ef e6       	ldi	r30, 0x6F	; 111
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 62       	ori	r24, 0x20	; 32
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <ADC_init>:
}
void ADC_init(void)
{
	ADMUX |= (1<<REFS0);
 108:	ac e7       	ldi	r26, 0x7C	; 124
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	8c 91       	ld	r24, X
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADATE)|(1<<ADPS1)|(1<<ADPS0);
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	83 62       	ori	r24, 0x23	; 35
 11a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
 11c:	80 81       	ld	r24, Z
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	80 83       	st	Z, r24
	ADMUX |=(1<<MUX0);
 122:	8c 91       	ld	r24, X
 124:	81 60       	ori	r24, 0x01	; 1
 126:	8c 93       	st	X, r24
	ADCSRA|=(1<<ADSC);
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <__vector_16>:
}
ISR(TIMER1_CAPT_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	static uint16_t tStart;
	uint16_t t = ICR1;
 146:	80 91 86 00 	lds	r24, 0x0086
 14a:	90 91 87 00 	lds	r25, 0x0087
	if (TCCR1B & (1<<ICES1))
 14e:	20 91 81 00 	lds	r18, 0x0081
 152:	26 ff       	sbrs	r18, 6
 154:	0a c0       	rjmp	.+20     	; 0x16a <__vector_16+0x3a>
	{
		// falling edge next
		TCCR1B &= ~(1<<ICES1);
 156:	e1 e8       	ldi	r30, 0x81	; 129
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	20 81       	ld	r18, Z
 15c:	2f 7b       	andi	r18, 0xBF	; 191
 15e:	20 83       	st	Z, r18
		tStart = t;
 160:	90 93 01 01 	sts	0x0101, r25
 164:	80 93 00 01 	sts	0x0100, r24
 168:	0f c0       	rjmp	.+30     	; 0x188 <__vector_16+0x58>
	}
	else
	{
		// rising edge next
		TCCR1B |= (1<<ICES1);
 16a:	e1 e8       	ldi	r30, 0x81	; 129
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	20 81       	ld	r18, Z
 170:	20 64       	ori	r18, 0x40	; 64
 172:	20 83       	st	Z, r18
		tPulse = t - tStart;
 174:	20 91 00 01 	lds	r18, 0x0100
 178:	30 91 01 01 	lds	r19, 0x0101
 17c:	82 1b       	sub	r24, r18
 17e:	93 0b       	sbc	r25, r19
 180:	90 93 03 01 	sts	0x0103, r25
 184:	80 93 02 01 	sts	0x0102, r24
	}
}
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <main>:
int main(void)
{
	DDRB = 0xff;			//Debugging LEDs
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;			//LEDs off
 1a2:	15 b8       	out	0x05, r1	; 5
	int iError = 0;			//Integral error is also zero
	float KP = 2.5;			//Proportional Gain Factor
	float KD = 0;			//Derivative Gain Factor
	float KI = 0;			//Integral Gain Factor
	
	Capture_init();		//Setup the system to be ready for input
 1a4:	0e 94 7c 00 	call	0xf8	; 0xf8 <Capture_init>
	PWM_init();			//Get ready to go grab the desired position
 1a8:	0e 94 6a 00 	call	0xd4	; 0xd4 <PWM_init>
	ADC_init();			//Get ready to go grab the current position
 1ac:	0e 94 84 00 	call	0x108	; 0x108 <ADC_init>
	DDRD |= (1<<PIND5);
 1b0:	55 9a       	sbi	0x0a, 5	; 10
	sei();
 1b2:	78 94       	sei
	DDRB = 0xff;			//Debugging LEDs
	PORTB = 0x00;			//LEDs off
	int positionOut = 500;	//This is where the arm will start with no external input captured
	int prevPosition = 500; //This is to prevent an error in a future loop (before input is captured)
	int prevError = 0;		//This is initially zero since we haven't had a difference in current position vs desired position
	int iError = 0;			//Integral error is also zero
 1b4:	e1 2c       	mov	r14, r1
 1b6:	f1 2c       	mov	r15, r1
{
	DDRB = 0xff;			//Debugging LEDs
	PORTB = 0x00;			//LEDs off
	int positionOut = 500;	//This is where the arm will start with no external input captured
	int prevPosition = 500; //This is to prevent an error in a future loop (before input is captured)
	int prevError = 0;		//This is initially zero since we haven't had a difference in current position vs desired position
 1b8:	a1 2c       	mov	r10, r1
 1ba:	b1 2c       	mov	r11, r1
int main(void)
{
	DDRB = 0xff;			//Debugging LEDs
	PORTB = 0x00;			//LEDs off
	int positionOut = 500;	//This is where the arm will start with no external input captured
	int prevPosition = 500; //This is to prevent an error in a future loop (before input is captured)
 1bc:	24 ef       	ldi	r18, 0xF4	; 244
 1be:	31 e0       	ldi	r19, 0x01	; 1
			unsigned int setPosition = ( ((unsigned int)t - US2TIMER1(1000)));
			if ((setPosition < 0)||(setPosition> 800)) //These are the two endpoint that you will want to adjust.
			setPosition = prevPosition;				//Assuming you are currently within an accepted range,
			//you can then move to a new position
			
			int potPosition = ADC;		//Grab position from ADC
 1c0:	0f 2e       	mov	r0, r31
 1c2:	f8 e7       	ldi	r31, 0x78	; 120
 1c4:	cf 2e       	mov	r12, r31
 1c6:	d1 2c       	mov	r13, r1
 1c8:	f0 2d       	mov	r31, r0
			positionOut= 500 + PID;	//Position for the system to go to
			
			PORTB = PID/4;			//Allow us to get there in 4 steps
			//This is done in case a new desired position is detected
			//Now recalculate the error
			OCR1B = (positionOut+1000);
 1ca:	0f 2e       	mov	r0, r31
 1cc:	fa e8       	ldi	r31, 0x8A	; 138
 1ce:	8f 2e       	mov	r8, r31
 1d0:	91 2c       	mov	r9, r1
 1d2:	f0 2d       	mov	r31, r0
 1d4:	0f 2e       	mov	r0, r31
 1d6:	fc e0       	ldi	r31, 0x0C	; 12
 1d8:	2f 2e       	mov	r2, r31
 1da:	fe ef       	ldi	r31, 0xFE	; 254
 1dc:	3f 2e       	mov	r3, r31
 1de:	f0 2d       	mov	r31, r0
	sei();
	while(1)
	{
		// Get current pulse time
		uint16_t t;
		cli();
 1e0:	f8 94       	cli
		t = tPulse;
 1e2:	00 91 02 01 	lds	r16, 0x0102
 1e6:	10 91 03 01 	lds	r17, 0x0103
		sei();
 1ea:	78 94       	sei
		// Filter out errors (like the first pulse)
		if (t >= US2TIMER1(750) && t <= US2TIMER1(2250))
 1ec:	c8 01       	movw	r24, r16
 1ee:	8e 5e       	subi	r24, 0xEE	; 238
 1f0:	92 40       	sbci	r25, 0x02	; 2
 1f2:	8d 3d       	cpi	r24, 0xDD	; 221
 1f4:	95 40       	sbci	r25, 0x05	; 5
 1f6:	a0 f7       	brcc	.-24     	; 0x1e0 <main+0x42>
		{
			unsigned int setPosition = ( ((unsigned int)t - US2TIMER1(1000)));
 1f8:	08 5e       	subi	r16, 0xE8	; 232
 1fa:	13 40       	sbci	r17, 0x03	; 3
			if ((setPosition < 0)||(setPosition> 800)) //These are the two endpoint that you will want to adjust.
 1fc:	01 32       	cpi	r16, 0x21	; 33
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	18 07       	cpc	r17, r24
 202:	08 f0       	brcs	.+2      	; 0x206 <main+0x68>
			setPosition = prevPosition;				//Assuming you are currently within an accepted range,
 204:	89 01       	movw	r16, r18
			//you can then move to a new position
			
			int potPosition = ADC;		//Grab position from ADC
 206:	f6 01       	movw	r30, r12
 208:	80 81       	ld	r24, Z
 20a:	91 81       	ldd	r25, Z+1	; 0x01
			if (ADC>=125)
 20c:	20 81       	ld	r18, Z
 20e:	31 81       	ldd	r19, Z+1	; 0x01
 210:	2d 37       	cpi	r18, 0x7D	; 125
 212:	31 05       	cpc	r19, r1
 214:	10 f0       	brcs	.+4      	; 0x21a <main+0x7c>
			{
				PORTD |= (1<<PIND5);
 216:	5d 9a       	sbi	0x0b, 5	; 11
 218:	01 c0       	rjmp	.+2      	; 0x21c <main+0x7e>
				
			}
			else
			{
				PORTD &= ~(1<<PIND5);
 21a:	5d 98       	cbi	0x0b, 5	; 11
			}
				//_delay_ms(1000);
			//Calculate errors
			int error = setPosition-potPosition;
 21c:	e8 01       	movw	r28, r16
 21e:	c8 1b       	sub	r28, r24
 220:	d9 0b       	sbc	r29, r25
			int dError = error - prevError;
			int PID = ((KP*error)+(KD*dError)+(KI*iError));	//Term to move
 222:	be 01       	movw	r22, r28
 224:	88 27       	eor	r24, r24
 226:	77 fd       	sbrc	r23, 7
 228:	80 95       	com	r24
 22a:	98 2f       	mov	r25, r24
 22c:	0e 94 03 02 	call	0x406	; 0x406 <__floatsisf>
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	40 e2       	ldi	r20, 0x20	; 32
 236:	50 e4       	ldi	r21, 0x40	; 64
 238:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
 23c:	2b 01       	movw	r4, r22
 23e:	3c 01       	movw	r6, r24
				PORTD &= ~(1<<PIND5);
			}
				//_delay_ms(1000);
			//Calculate errors
			int error = setPosition-potPosition;
			int dError = error - prevError;
 240:	be 01       	movw	r22, r28
 242:	6a 19       	sub	r22, r10
 244:	7b 09       	sbc	r23, r11
			int PID = ((KP*error)+(KD*dError)+(KI*iError));	//Term to move
 246:	88 27       	eor	r24, r24
 248:	77 fd       	sbrc	r23, 7
 24a:	80 95       	com	r24
 24c:	98 2f       	mov	r25, r24
 24e:	0e 94 03 02 	call	0x406	; 0x406 <__floatsisf>
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	a9 01       	movw	r20, r18
 258:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
 25c:	9b 01       	movw	r18, r22
 25e:	ac 01       	movw	r20, r24
 260:	c3 01       	movw	r24, r6
 262:	b2 01       	movw	r22, r4
 264:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__addsf3>
 268:	2b 01       	movw	r4, r22
 26a:	3c 01       	movw	r6, r24
 26c:	b7 01       	movw	r22, r14
 26e:	88 27       	eor	r24, r24
 270:	77 fd       	sbrc	r23, 7
 272:	80 95       	com	r24
 274:	98 2f       	mov	r25, r24
 276:	0e 94 03 02 	call	0x406	; 0x406 <__floatsisf>
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	a9 01       	movw	r20, r18
 280:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
 284:	9b 01       	movw	r18, r22
 286:	ac 01       	movw	r20, r24
 288:	c3 01       	movw	r24, r6
 28a:	b2 01       	movw	r22, r4
 28c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__addsf3>
 290:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fixsfsi>
 294:	86 2f       	mov	r24, r22
 296:	97 2f       	mov	r25, r23
 298:	85 3f       	cpi	r24, 0xF5	; 245
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	9f 07       	cpc	r25, r31
 29e:	14 f0       	brlt	.+4      	; 0x2a4 <main+0x106>
 2a0:	84 ef       	ldi	r24, 0xF4	; 244
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	8c 30       	cpi	r24, 0x0C	; 12
 2a6:	2e ef       	ldi	r18, 0xFE	; 254
 2a8:	92 07       	cpc	r25, r18
 2aa:	0c f4       	brge	.+2      	; 0x2ae <main+0x110>
 2ac:	c1 01       	movw	r24, r2
			if ((PID)<-500)
			PID=-500;
			
			positionOut= 500 + PID;	//Position for the system to go to
			
			PORTB = PID/4;			//Allow us to get there in 4 steps
 2ae:	9c 01       	movw	r18, r24
 2b0:	99 23       	and	r25, r25
 2b2:	14 f4       	brge	.+4      	; 0x2b8 <main+0x11a>
 2b4:	2d 5f       	subi	r18, 0xFD	; 253
 2b6:	3f 4f       	sbci	r19, 0xFF	; 255
 2b8:	35 95       	asr	r19
 2ba:	27 95       	ror	r18
 2bc:	35 95       	asr	r19
 2be:	27 95       	ror	r18
 2c0:	25 b9       	out	0x05, r18	; 5
			//This is done in case a new desired position is detected
			//Now recalculate the error
			OCR1B = (positionOut+1000);
 2c2:	84 52       	subi	r24, 0x24	; 36
 2c4:	9a 4f       	sbci	r25, 0xFA	; 250
 2c6:	f4 01       	movw	r30, r8
 2c8:	91 83       	std	Z+1, r25	; 0x01
 2ca:	80 83       	st	Z, r24
			prevError = error;
			prevPosition=setPosition;
 2cc:	98 01       	movw	r18, r16
			iError = iError+error;
 2ce:	ec 0e       	add	r14, r28
 2d0:	fd 1e       	adc	r15, r29
			
			PORTB = PID/4;			//Allow us to get there in 4 steps
			//This is done in case a new desired position is detected
			//Now recalculate the error
			OCR1B = (positionOut+1000);
			prevError = error;
 2d2:	5e 01       	movw	r10, r28
 2d4:	85 cf       	rjmp	.-246    	; 0x1e0 <main+0x42>

000002d6 <__subsf3>:
 2d6:	50 58       	subi	r21, 0x80	; 128

000002d8 <__addsf3>:
 2d8:	bb 27       	eor	r27, r27
 2da:	aa 27       	eor	r26, r26
 2dc:	0e d0       	rcall	.+28     	; 0x2fa <__addsf3x>
 2de:	e5 c0       	rjmp	.+458    	; 0x4aa <__fp_round>
 2e0:	d6 d0       	rcall	.+428    	; 0x48e <__fp_pscA>
 2e2:	30 f0       	brcs	.+12     	; 0x2f0 <__addsf3+0x18>
 2e4:	db d0       	rcall	.+438    	; 0x49c <__fp_pscB>
 2e6:	20 f0       	brcs	.+8      	; 0x2f0 <__addsf3+0x18>
 2e8:	31 f4       	brne	.+12     	; 0x2f6 <__addsf3+0x1e>
 2ea:	9f 3f       	cpi	r25, 0xFF	; 255
 2ec:	11 f4       	brne	.+4      	; 0x2f2 <__addsf3+0x1a>
 2ee:	1e f4       	brtc	.+6      	; 0x2f6 <__addsf3+0x1e>
 2f0:	cb c0       	rjmp	.+406    	; 0x488 <__fp_nan>
 2f2:	0e f4       	brtc	.+2      	; 0x2f6 <__addsf3+0x1e>
 2f4:	e0 95       	com	r30
 2f6:	e7 fb       	bst	r30, 7
 2f8:	c1 c0       	rjmp	.+386    	; 0x47c <__fp_inf>

000002fa <__addsf3x>:
 2fa:	e9 2f       	mov	r30, r25
 2fc:	e7 d0       	rcall	.+462    	; 0x4cc <__fp_split3>
 2fe:	80 f3       	brcs	.-32     	; 0x2e0 <__addsf3+0x8>
 300:	ba 17       	cp	r27, r26
 302:	62 07       	cpc	r22, r18
 304:	73 07       	cpc	r23, r19
 306:	84 07       	cpc	r24, r20
 308:	95 07       	cpc	r25, r21
 30a:	18 f0       	brcs	.+6      	; 0x312 <__addsf3x+0x18>
 30c:	71 f4       	brne	.+28     	; 0x32a <__addsf3x+0x30>
 30e:	9e f5       	brtc	.+102    	; 0x376 <__addsf3x+0x7c>
 310:	ff c0       	rjmp	.+510    	; 0x510 <__fp_zero>
 312:	0e f4       	brtc	.+2      	; 0x316 <__addsf3x+0x1c>
 314:	e0 95       	com	r30
 316:	0b 2e       	mov	r0, r27
 318:	ba 2f       	mov	r27, r26
 31a:	a0 2d       	mov	r26, r0
 31c:	0b 01       	movw	r0, r22
 31e:	b9 01       	movw	r22, r18
 320:	90 01       	movw	r18, r0
 322:	0c 01       	movw	r0, r24
 324:	ca 01       	movw	r24, r20
 326:	a0 01       	movw	r20, r0
 328:	11 24       	eor	r1, r1
 32a:	ff 27       	eor	r31, r31
 32c:	59 1b       	sub	r21, r25
 32e:	99 f0       	breq	.+38     	; 0x356 <__addsf3x+0x5c>
 330:	59 3f       	cpi	r21, 0xF9	; 249
 332:	50 f4       	brcc	.+20     	; 0x348 <__addsf3x+0x4e>
 334:	50 3e       	cpi	r21, 0xE0	; 224
 336:	68 f1       	brcs	.+90     	; 0x392 <__addsf3x+0x98>
 338:	1a 16       	cp	r1, r26
 33a:	f0 40       	sbci	r31, 0x00	; 0
 33c:	a2 2f       	mov	r26, r18
 33e:	23 2f       	mov	r18, r19
 340:	34 2f       	mov	r19, r20
 342:	44 27       	eor	r20, r20
 344:	58 5f       	subi	r21, 0xF8	; 248
 346:	f3 cf       	rjmp	.-26     	; 0x32e <__addsf3x+0x34>
 348:	46 95       	lsr	r20
 34a:	37 95       	ror	r19
 34c:	27 95       	ror	r18
 34e:	a7 95       	ror	r26
 350:	f0 40       	sbci	r31, 0x00	; 0
 352:	53 95       	inc	r21
 354:	c9 f7       	brne	.-14     	; 0x348 <__addsf3x+0x4e>
 356:	7e f4       	brtc	.+30     	; 0x376 <__addsf3x+0x7c>
 358:	1f 16       	cp	r1, r31
 35a:	ba 0b       	sbc	r27, r26
 35c:	62 0b       	sbc	r22, r18
 35e:	73 0b       	sbc	r23, r19
 360:	84 0b       	sbc	r24, r20
 362:	ba f0       	brmi	.+46     	; 0x392 <__addsf3x+0x98>
 364:	91 50       	subi	r25, 0x01	; 1
 366:	a1 f0       	breq	.+40     	; 0x390 <__addsf3x+0x96>
 368:	ff 0f       	add	r31, r31
 36a:	bb 1f       	adc	r27, r27
 36c:	66 1f       	adc	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	88 1f       	adc	r24, r24
 372:	c2 f7       	brpl	.-16     	; 0x364 <__addsf3x+0x6a>
 374:	0e c0       	rjmp	.+28     	; 0x392 <__addsf3x+0x98>
 376:	ba 0f       	add	r27, r26
 378:	62 1f       	adc	r22, r18
 37a:	73 1f       	adc	r23, r19
 37c:	84 1f       	adc	r24, r20
 37e:	48 f4       	brcc	.+18     	; 0x392 <__addsf3x+0x98>
 380:	87 95       	ror	r24
 382:	77 95       	ror	r23
 384:	67 95       	ror	r22
 386:	b7 95       	ror	r27
 388:	f7 95       	ror	r31
 38a:	9e 3f       	cpi	r25, 0xFE	; 254
 38c:	08 f0       	brcs	.+2      	; 0x390 <__addsf3x+0x96>
 38e:	b3 cf       	rjmp	.-154    	; 0x2f6 <__addsf3+0x1e>
 390:	93 95       	inc	r25
 392:	88 0f       	add	r24, r24
 394:	08 f0       	brcs	.+2      	; 0x398 <__addsf3x+0x9e>
 396:	99 27       	eor	r25, r25
 398:	ee 0f       	add	r30, r30
 39a:	97 95       	ror	r25
 39c:	87 95       	ror	r24
 39e:	08 95       	ret

000003a0 <__fixsfsi>:
 3a0:	04 d0       	rcall	.+8      	; 0x3aa <__fixunssfsi>
 3a2:	68 94       	set
 3a4:	b1 11       	cpse	r27, r1
 3a6:	b5 c0       	rjmp	.+362    	; 0x512 <__fp_szero>
 3a8:	08 95       	ret

000003aa <__fixunssfsi>:
 3aa:	98 d0       	rcall	.+304    	; 0x4dc <__fp_splitA>
 3ac:	88 f0       	brcs	.+34     	; 0x3d0 <__fixunssfsi+0x26>
 3ae:	9f 57       	subi	r25, 0x7F	; 127
 3b0:	90 f0       	brcs	.+36     	; 0x3d6 <__fixunssfsi+0x2c>
 3b2:	b9 2f       	mov	r27, r25
 3b4:	99 27       	eor	r25, r25
 3b6:	b7 51       	subi	r27, 0x17	; 23
 3b8:	a0 f0       	brcs	.+40     	; 0x3e2 <__fixunssfsi+0x38>
 3ba:	d1 f0       	breq	.+52     	; 0x3f0 <__fixunssfsi+0x46>
 3bc:	66 0f       	add	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	88 1f       	adc	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	1a f0       	brmi	.+6      	; 0x3cc <__fixunssfsi+0x22>
 3c6:	ba 95       	dec	r27
 3c8:	c9 f7       	brne	.-14     	; 0x3bc <__fixunssfsi+0x12>
 3ca:	12 c0       	rjmp	.+36     	; 0x3f0 <__fixunssfsi+0x46>
 3cc:	b1 30       	cpi	r27, 0x01	; 1
 3ce:	81 f0       	breq	.+32     	; 0x3f0 <__fixunssfsi+0x46>
 3d0:	9f d0       	rcall	.+318    	; 0x510 <__fp_zero>
 3d2:	b1 e0       	ldi	r27, 0x01	; 1
 3d4:	08 95       	ret
 3d6:	9c c0       	rjmp	.+312    	; 0x510 <__fp_zero>
 3d8:	67 2f       	mov	r22, r23
 3da:	78 2f       	mov	r23, r24
 3dc:	88 27       	eor	r24, r24
 3de:	b8 5f       	subi	r27, 0xF8	; 248
 3e0:	39 f0       	breq	.+14     	; 0x3f0 <__fixunssfsi+0x46>
 3e2:	b9 3f       	cpi	r27, 0xF9	; 249
 3e4:	cc f3       	brlt	.-14     	; 0x3d8 <__fixunssfsi+0x2e>
 3e6:	86 95       	lsr	r24
 3e8:	77 95       	ror	r23
 3ea:	67 95       	ror	r22
 3ec:	b3 95       	inc	r27
 3ee:	d9 f7       	brne	.-10     	; 0x3e6 <__fixunssfsi+0x3c>
 3f0:	3e f4       	brtc	.+14     	; 0x400 <__fixunssfsi+0x56>
 3f2:	90 95       	com	r25
 3f4:	80 95       	com	r24
 3f6:	70 95       	com	r23
 3f8:	61 95       	neg	r22
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	8f 4f       	sbci	r24, 0xFF	; 255
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	08 95       	ret

00000402 <__floatunsisf>:
 402:	e8 94       	clt
 404:	09 c0       	rjmp	.+18     	; 0x418 <__floatsisf+0x12>

00000406 <__floatsisf>:
 406:	97 fb       	bst	r25, 7
 408:	3e f4       	brtc	.+14     	; 0x418 <__floatsisf+0x12>
 40a:	90 95       	com	r25
 40c:	80 95       	com	r24
 40e:	70 95       	com	r23
 410:	61 95       	neg	r22
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	8f 4f       	sbci	r24, 0xFF	; 255
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	99 23       	and	r25, r25
 41a:	a9 f0       	breq	.+42     	; 0x446 <__floatsisf+0x40>
 41c:	f9 2f       	mov	r31, r25
 41e:	96 e9       	ldi	r25, 0x96	; 150
 420:	bb 27       	eor	r27, r27
 422:	93 95       	inc	r25
 424:	f6 95       	lsr	r31
 426:	87 95       	ror	r24
 428:	77 95       	ror	r23
 42a:	67 95       	ror	r22
 42c:	b7 95       	ror	r27
 42e:	f1 11       	cpse	r31, r1
 430:	f8 cf       	rjmp	.-16     	; 0x422 <__floatsisf+0x1c>
 432:	fa f4       	brpl	.+62     	; 0x472 <__floatsisf+0x6c>
 434:	bb 0f       	add	r27, r27
 436:	11 f4       	brne	.+4      	; 0x43c <__floatsisf+0x36>
 438:	60 ff       	sbrs	r22, 0
 43a:	1b c0       	rjmp	.+54     	; 0x472 <__floatsisf+0x6c>
 43c:	6f 5f       	subi	r22, 0xFF	; 255
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	8f 4f       	sbci	r24, 0xFF	; 255
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	16 c0       	rjmp	.+44     	; 0x472 <__floatsisf+0x6c>
 446:	88 23       	and	r24, r24
 448:	11 f0       	breq	.+4      	; 0x44e <__floatsisf+0x48>
 44a:	96 e9       	ldi	r25, 0x96	; 150
 44c:	11 c0       	rjmp	.+34     	; 0x470 <__floatsisf+0x6a>
 44e:	77 23       	and	r23, r23
 450:	21 f0       	breq	.+8      	; 0x45a <__floatsisf+0x54>
 452:	9e e8       	ldi	r25, 0x8E	; 142
 454:	87 2f       	mov	r24, r23
 456:	76 2f       	mov	r23, r22
 458:	05 c0       	rjmp	.+10     	; 0x464 <__floatsisf+0x5e>
 45a:	66 23       	and	r22, r22
 45c:	71 f0       	breq	.+28     	; 0x47a <__floatsisf+0x74>
 45e:	96 e8       	ldi	r25, 0x86	; 134
 460:	86 2f       	mov	r24, r22
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	2a f0       	brmi	.+10     	; 0x472 <__floatsisf+0x6c>
 468:	9a 95       	dec	r25
 46a:	66 0f       	add	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	88 1f       	adc	r24, r24
 470:	da f7       	brpl	.-10     	; 0x468 <__floatsisf+0x62>
 472:	88 0f       	add	r24, r24
 474:	96 95       	lsr	r25
 476:	87 95       	ror	r24
 478:	97 f9       	bld	r25, 7
 47a:	08 95       	ret

0000047c <__fp_inf>:
 47c:	97 f9       	bld	r25, 7
 47e:	9f 67       	ori	r25, 0x7F	; 127
 480:	80 e8       	ldi	r24, 0x80	; 128
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	08 95       	ret

00000488 <__fp_nan>:
 488:	9f ef       	ldi	r25, 0xFF	; 255
 48a:	80 ec       	ldi	r24, 0xC0	; 192
 48c:	08 95       	ret

0000048e <__fp_pscA>:
 48e:	00 24       	eor	r0, r0
 490:	0a 94       	dec	r0
 492:	16 16       	cp	r1, r22
 494:	17 06       	cpc	r1, r23
 496:	18 06       	cpc	r1, r24
 498:	09 06       	cpc	r0, r25
 49a:	08 95       	ret

0000049c <__fp_pscB>:
 49c:	00 24       	eor	r0, r0
 49e:	0a 94       	dec	r0
 4a0:	12 16       	cp	r1, r18
 4a2:	13 06       	cpc	r1, r19
 4a4:	14 06       	cpc	r1, r20
 4a6:	05 06       	cpc	r0, r21
 4a8:	08 95       	ret

000004aa <__fp_round>:
 4aa:	09 2e       	mov	r0, r25
 4ac:	03 94       	inc	r0
 4ae:	00 0c       	add	r0, r0
 4b0:	11 f4       	brne	.+4      	; 0x4b6 <__fp_round+0xc>
 4b2:	88 23       	and	r24, r24
 4b4:	52 f0       	brmi	.+20     	; 0x4ca <__fp_round+0x20>
 4b6:	bb 0f       	add	r27, r27
 4b8:	40 f4       	brcc	.+16     	; 0x4ca <__fp_round+0x20>
 4ba:	bf 2b       	or	r27, r31
 4bc:	11 f4       	brne	.+4      	; 0x4c2 <__fp_round+0x18>
 4be:	60 ff       	sbrs	r22, 0
 4c0:	04 c0       	rjmp	.+8      	; 0x4ca <__fp_round+0x20>
 4c2:	6f 5f       	subi	r22, 0xFF	; 255
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	8f 4f       	sbci	r24, 0xFF	; 255
 4c8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ca:	08 95       	ret

000004cc <__fp_split3>:
 4cc:	57 fd       	sbrc	r21, 7
 4ce:	90 58       	subi	r25, 0x80	; 128
 4d0:	44 0f       	add	r20, r20
 4d2:	55 1f       	adc	r21, r21
 4d4:	59 f0       	breq	.+22     	; 0x4ec <__fp_splitA+0x10>
 4d6:	5f 3f       	cpi	r21, 0xFF	; 255
 4d8:	71 f0       	breq	.+28     	; 0x4f6 <__fp_splitA+0x1a>
 4da:	47 95       	ror	r20

000004dc <__fp_splitA>:
 4dc:	88 0f       	add	r24, r24
 4de:	97 fb       	bst	r25, 7
 4e0:	99 1f       	adc	r25, r25
 4e2:	61 f0       	breq	.+24     	; 0x4fc <__fp_splitA+0x20>
 4e4:	9f 3f       	cpi	r25, 0xFF	; 255
 4e6:	79 f0       	breq	.+30     	; 0x506 <__fp_splitA+0x2a>
 4e8:	87 95       	ror	r24
 4ea:	08 95       	ret
 4ec:	12 16       	cp	r1, r18
 4ee:	13 06       	cpc	r1, r19
 4f0:	14 06       	cpc	r1, r20
 4f2:	55 1f       	adc	r21, r21
 4f4:	f2 cf       	rjmp	.-28     	; 0x4da <__fp_split3+0xe>
 4f6:	46 95       	lsr	r20
 4f8:	f1 df       	rcall	.-30     	; 0x4dc <__fp_splitA>
 4fa:	08 c0       	rjmp	.+16     	; 0x50c <__fp_splitA+0x30>
 4fc:	16 16       	cp	r1, r22
 4fe:	17 06       	cpc	r1, r23
 500:	18 06       	cpc	r1, r24
 502:	99 1f       	adc	r25, r25
 504:	f1 cf       	rjmp	.-30     	; 0x4e8 <__fp_splitA+0xc>
 506:	86 95       	lsr	r24
 508:	71 05       	cpc	r23, r1
 50a:	61 05       	cpc	r22, r1
 50c:	08 94       	sec
 50e:	08 95       	ret

00000510 <__fp_zero>:
 510:	e8 94       	clt

00000512 <__fp_szero>:
 512:	bb 27       	eor	r27, r27
 514:	66 27       	eor	r22, r22
 516:	77 27       	eor	r23, r23
 518:	cb 01       	movw	r24, r22
 51a:	97 f9       	bld	r25, 7
 51c:	08 95       	ret

0000051e <__mulsf3>:
 51e:	0b d0       	rcall	.+22     	; 0x536 <__mulsf3x>
 520:	c4 cf       	rjmp	.-120    	; 0x4aa <__fp_round>
 522:	b5 df       	rcall	.-150    	; 0x48e <__fp_pscA>
 524:	28 f0       	brcs	.+10     	; 0x530 <__mulsf3+0x12>
 526:	ba df       	rcall	.-140    	; 0x49c <__fp_pscB>
 528:	18 f0       	brcs	.+6      	; 0x530 <__mulsf3+0x12>
 52a:	95 23       	and	r25, r21
 52c:	09 f0       	breq	.+2      	; 0x530 <__mulsf3+0x12>
 52e:	a6 cf       	rjmp	.-180    	; 0x47c <__fp_inf>
 530:	ab cf       	rjmp	.-170    	; 0x488 <__fp_nan>
 532:	11 24       	eor	r1, r1
 534:	ee cf       	rjmp	.-36     	; 0x512 <__fp_szero>

00000536 <__mulsf3x>:
 536:	ca df       	rcall	.-108    	; 0x4cc <__fp_split3>
 538:	a0 f3       	brcs	.-24     	; 0x522 <__mulsf3+0x4>

0000053a <__mulsf3_pse>:
 53a:	95 9f       	mul	r25, r21
 53c:	d1 f3       	breq	.-12     	; 0x532 <__mulsf3+0x14>
 53e:	95 0f       	add	r25, r21
 540:	50 e0       	ldi	r21, 0x00	; 0
 542:	55 1f       	adc	r21, r21
 544:	62 9f       	mul	r22, r18
 546:	f0 01       	movw	r30, r0
 548:	72 9f       	mul	r23, r18
 54a:	bb 27       	eor	r27, r27
 54c:	f0 0d       	add	r31, r0
 54e:	b1 1d       	adc	r27, r1
 550:	63 9f       	mul	r22, r19
 552:	aa 27       	eor	r26, r26
 554:	f0 0d       	add	r31, r0
 556:	b1 1d       	adc	r27, r1
 558:	aa 1f       	adc	r26, r26
 55a:	64 9f       	mul	r22, r20
 55c:	66 27       	eor	r22, r22
 55e:	b0 0d       	add	r27, r0
 560:	a1 1d       	adc	r26, r1
 562:	66 1f       	adc	r22, r22
 564:	82 9f       	mul	r24, r18
 566:	22 27       	eor	r18, r18
 568:	b0 0d       	add	r27, r0
 56a:	a1 1d       	adc	r26, r1
 56c:	62 1f       	adc	r22, r18
 56e:	73 9f       	mul	r23, r19
 570:	b0 0d       	add	r27, r0
 572:	a1 1d       	adc	r26, r1
 574:	62 1f       	adc	r22, r18
 576:	83 9f       	mul	r24, r19
 578:	a0 0d       	add	r26, r0
 57a:	61 1d       	adc	r22, r1
 57c:	22 1f       	adc	r18, r18
 57e:	74 9f       	mul	r23, r20
 580:	33 27       	eor	r19, r19
 582:	a0 0d       	add	r26, r0
 584:	61 1d       	adc	r22, r1
 586:	23 1f       	adc	r18, r19
 588:	84 9f       	mul	r24, r20
 58a:	60 0d       	add	r22, r0
 58c:	21 1d       	adc	r18, r1
 58e:	82 2f       	mov	r24, r18
 590:	76 2f       	mov	r23, r22
 592:	6a 2f       	mov	r22, r26
 594:	11 24       	eor	r1, r1
 596:	9f 57       	subi	r25, 0x7F	; 127
 598:	50 40       	sbci	r21, 0x00	; 0
 59a:	8a f0       	brmi	.+34     	; 0x5be <__mulsf3_pse+0x84>
 59c:	e1 f0       	breq	.+56     	; 0x5d6 <__mulsf3_pse+0x9c>
 59e:	88 23       	and	r24, r24
 5a0:	4a f0       	brmi	.+18     	; 0x5b4 <__mulsf3_pse+0x7a>
 5a2:	ee 0f       	add	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	bb 1f       	adc	r27, r27
 5a8:	66 1f       	adc	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	91 50       	subi	r25, 0x01	; 1
 5b0:	50 40       	sbci	r21, 0x00	; 0
 5b2:	a9 f7       	brne	.-22     	; 0x59e <__mulsf3_pse+0x64>
 5b4:	9e 3f       	cpi	r25, 0xFE	; 254
 5b6:	51 05       	cpc	r21, r1
 5b8:	70 f0       	brcs	.+28     	; 0x5d6 <__mulsf3_pse+0x9c>
 5ba:	60 cf       	rjmp	.-320    	; 0x47c <__fp_inf>
 5bc:	aa cf       	rjmp	.-172    	; 0x512 <__fp_szero>
 5be:	5f 3f       	cpi	r21, 0xFF	; 255
 5c0:	ec f3       	brlt	.-6      	; 0x5bc <__mulsf3_pse+0x82>
 5c2:	98 3e       	cpi	r25, 0xE8	; 232
 5c4:	dc f3       	brlt	.-10     	; 0x5bc <__mulsf3_pse+0x82>
 5c6:	86 95       	lsr	r24
 5c8:	77 95       	ror	r23
 5ca:	67 95       	ror	r22
 5cc:	b7 95       	ror	r27
 5ce:	f7 95       	ror	r31
 5d0:	e7 95       	ror	r30
 5d2:	9f 5f       	subi	r25, 0xFF	; 255
 5d4:	c1 f7       	brne	.-16     	; 0x5c6 <__mulsf3_pse+0x8c>
 5d6:	fe 2b       	or	r31, r30
 5d8:	88 0f       	add	r24, r24
 5da:	91 1d       	adc	r25, r1
 5dc:	96 95       	lsr	r25
 5de:	87 95       	ror	r24
 5e0:	97 f9       	bld	r25, 7
 5e2:	08 95       	ret

000005e4 <_exit>:
 5e4:	f8 94       	cli

000005e6 <__stop_program>:
 5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <__stop_program>
